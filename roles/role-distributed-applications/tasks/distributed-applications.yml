---
- name: Install required packages
  apt: "name={{item}} state=latest"
  with_items: "{{da_required_packages}}"

- name: Install pip packages
  pip: name={{item}}
  with_items: "{{da_required_pip}}"

- name: Check if docker package is installed
  command: "dpkg-query -l docker-engine"
  register: deb_check
  changed_when: False
  ignore_errors: True

- name: install docker
  shell: curl -sSL https://get.docker.com/ | sh
  when: deb_check.stderr.find('no packages found') != -1

- name: Get docker0 ip
  shell: echo $(ip addr | awk '/inet/ && /docker0/{sub(/\/.*$/,"",$2); print $2}')
  register: __host_ip_docker0

- name: Create etherpad repo dir
  file: "path={{da_ehterpad_repo_path}} state=directory owner={{da_user}} group={{da_user}}"

- name: Clone etherpad docker project
  git: "repo={{da_etherpad_docker_repo}} dest={{da_ehterpad_repo_path}} force=yes version={{da_etherpad_docker_repo_version}}"
  sudo_user: "{{da_user}}"

- name: Set etherpad conf file
  template: "src=settings.json.j2 dest={{da_ehterpad_repo_path}}/settings.json owner={{da_user}} group={{da_user}} mode=0644"

- name: Build docker image
  docker_image: "name={{da_docker_image_name}} path={{da_ehterpad_repo_path}} state=build"

- name: Check if docker_instances_count_file exists
  stat: path="{{da_docker_instances_count_file}}"
  register: is_docker_instances_count_file

- name: Set default value if file not exists
  copy: content="{{da_docker_instances_count_default}}" dest="{{da_docker_instances_count_file}}"
  when: is_docker_instances_count_file.stat.exists == False

- name: Set var with da_docker_instances_count
  shell: cat "{{da_docker_instances_count_file}}"
  register: da_docker_instances_count
  changed_when: False

- name: Create generate_docker_instances_json command
  copy: src=generate_docker_instances_json.sh dest=/usr/bin/generate_docker_instances_json owner=root group=root mode=0755

- name: Call generate_docker_instances_json command
  shell: generate_docker_instances_json {{da_docker_instances_count.stdout}} > /tmp/lol.yml

- include_vars: /tmp/lol.yml

- name: Run docker
  docker:
    name: "{{item.name}}"
    image: "{{da_docker_image_name}}"
    state: restarted
    net: bridge
    # expose: "9001"
    ports:
    - "{{item.ports|string}}"
  with_items: "{{da_docker_instances}}"

- name: Run Seagull (docker monitoring)
  docker:
    name: seagull
    image: tobegit3hub/seagull
    state: restarted
    volumes: "/var/run/docker.sock:/var/run/docker.sock"
    expose: 10086
    ports: "10086:10086"

- name: Run prometheus (docker monitoring)
  docker:
    name: prometheus
    image: prom/prometheus
    state: restarted
    expose: 9090
    ports: "9090:9090"
    volumes : "prometheus.yml:/etc/prometheus/prometheus.yml"